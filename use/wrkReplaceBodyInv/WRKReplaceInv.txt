model shop

-- Definition of the Product class
class Product 
    attributes
        id: Integer
        description: String
        price: Integer
        stock: Integer
end

-- Definition of the Category class
class Category 
    attributes
        id: Integer
        name: String
end

-- Definition of the Customer class
class Customer 
    attributes
        id: Integer
        blocked: Boolean
end

-- Definition of the Order class
class Order 
    attributes
        id: Integer
        total: Integer
        finalized: Boolean
end

-- Definition of the OrderLine class
class OrderLine 
    attributes
        quantity: Integer
end

-- Association between Order and Customer
association OrderCustomer between
    Order[*] role order
    Customer[1] role customer
end

-- Association between OrderLine and Order
association OrderLineOrder between
    OrderLine[1..*] role orderLine
    Order[1] role order
end

-- Association between Product and Category
association ProductCategory between
    Product[*] role product
    Category[1] role category
end

-- Association between OrderLine and Product
-- [*] does not cause link error but [1..*] does (IMPORTANT)
association OrderLineProduct between
    OrderLine[1..*] role orderLine
    Product[1] role product
end

constraints

-- Constraints block

-- Invariants for Product
--context Product inv idPositive:
--    self.id > 0

---context Product inv descriptionNotEmpty:
--    self.description.size() > 0

context Product inv priceNonNegative:
    self.price >= 0

--context Product inv stockNonNegative:
--    self.stock >= 0

--context Product inv stockReasonable:
--    self.stock <= 10000

context Product inv uniqueProductId:
    Product.allInstances()->forAll(p | p <> self implies p.id <> self.id)

-- Invariant for Product ensuring sufficient stock for unfinished orders (IMPORTANT)
context Product inv sufficientStock:--< Modify by MVM [self.stock = OrderLine.allInstances()        ->select(ol | ol.product = self and ol.order.finalized = false)        ->collect(ol | ol.quantity)        ->sum()]
(self.stock >= OrderLine.allInstances->select(ol : OrderLine | ((ol.product = self) and (ol.order.finalized = false)))->collect(ol : OrderLine | ol.quantity)->sum)
--provis
--context Product inv maxPetNoFinalizadas:
--    OrderLine.allInstances()
--        ->select(ol | ol.product = self and ol.order.finalized = false)->size() < 2

context Product inv stockLimits:
    self.stock >= 5 and self.stock <=10

-- Invariants for Category
--context Category inv idPositive:
--  self.id > 0

--context Category inv nameNotEmpty:
--  self.name.size() > 0

context Category inv nameUnique:
  Category.allInstances()->forAll(c | c <> self implies c.name <> self.name)

--context Category inv nameValidLength:
--  self.name.size() <= 50
  
-- Invariants for Customer
--context Customer inv idPositive:
--    self.id > 0

context Customer inv customerNotBlocked:
    self.order->notEmpty() implies self.blocked = false
  
-- Invariants for Order
--context Order inv idPositive:
--    self.id > 0

--context Order inv customerAssigned:
--    self.customer->notEmpty()

context Order inv uniqueOrderId:
    Order.allInstances()->forAll(o | o <> self implies o.id <> self.id)

context Order inv calculateTotal:
    self.total = self.orderLine
       ->collect(ol | ol.quantity * ol.product.price)
       ->sum()

context Order inv distinctProductInOrderLines:
    self.orderLine->forAll(ol1, ol2 | ol1 <> ol2 implies ol1.product <> ol2.product)

-- Invariant for OrderLine ensuring positive quantity (NEW)
context OrderLine inv singleProductOrders:
    self.quantity = 1
